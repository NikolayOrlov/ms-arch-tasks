{
	"info": {
		"_postman_id": "4d83849d-0c37-413e-9777-217e35d23fa8",
		"name": "SAGA by idempotent API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16432232"
	},
	"item": [
		{
			"name": "добавление в корзину первого продукта",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Product 1 is added to the customer's cart\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"customerId\", pm.variables.replaceIn('{{$randomUUID}}'));",
							"pm.collectionVariables.set(\"product1Id\", pm.variables.replaceIn('{{$randomUUID}}'));",
							"pm.collectionVariables.set(\"newCustomerCartLineItemIdempotencyKey\", pm.variables.replaceIn('{{$randomUUID}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Idempotency-Key",
						"value": "{{newCustomerCartLineItemIdempotencyKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"productId\": \"{{product1Id}}\",\n  \"quantity\": 1,\n  \"price\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cartservice/public/line-item",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cartservice",
						"public",
						"line-item"
					]
				}
			},
			"response": []
		},
		{
			"name": "retry добавление в корзину первого продукта",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retry for product 1 is added to the customer's cart\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Idempotency-Key",
						"value": "{{newCustomerCartLineItemIdempotencyKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"productId\": \"{{product1Id}}\",\n  \"quantity\": 1,\n  \"price\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cartservice/public/line-item",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cartservice",
						"public",
						"line-item"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка временного резервирования товара, помещенного в корзину",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check product 1 is reserved temporary for the cart\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var product1Id = pm.collectionVariables.get(\"product1Id\");",
							"    pm.expect(responseBody.inCarts[0].productId).to.equal(product1Id);",
							"    pm.expect(responseBody.inCarts[0].quantity).to.equal(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stockservice/public/reserve?product_id={{product1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"public",
						"reserve"
					],
					"query": [
						{
							"key": "product_id",
							"value": "{{product1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "начать оформление первого заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checkout 1 is started\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var paymentId = responseBody.payment.id;",
							"    pm.collectionVariables.set(\"payment1Id\", paymentId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"checkoutIdempotencyKey\", pm.variables.replaceIn('{{$randomUUID}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Idempotency-Key",
						"value": "{{checkoutIdempotencyKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"paymentWay\": {\n    \"type\": \"CARD\"\n  },\n  \"deliveryAddress\": {\n    \"asText\": \"my address\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/checkoutservice/public/checkout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"checkoutservice",
						"public",
						"checkout"
					]
				}
			},
			"response": []
		},
		{
			"name": "retry начать оформление первого заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retry for checkout 1 is started\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var paymentId = responseBody.payment.id;",
							"    pm.expect(paymentId).to.equal(pm.collectionVariables.get(\"payment1Id\"));",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Idempotency-Key",
						"value": "{{checkoutIdempotencyKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"paymentWay\": {\n    \"type\": \"CARD\"\n  },\n  \"deliveryAddress\": {\n    \"asText\": \"my address\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/checkoutservice/public/checkout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"checkoutservice",
						"public",
						"checkout"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка состояния первого заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check order 1 state is 'CHARGE_PENDING' after the checkout process is started\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var orderId = responseBody[0].id;",
							"    pm.collectionVariables.set(\"order1Id\", orderId);",
							"    var orderStatus = responseBody[0].status;",
							"    pm.expect(orderStatus).to.equal(\"CHARGE_PENDING\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orderservice/public/order?customer_id={{customerId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"public",
						"order"
					],
					"query": [
						{
							"key": "customer_id",
							"value": "{{customerId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка резервирования первого товара после начала оформления первого заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check product 1 is reserved for order 1\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var product1Id = pm.collectionVariables.get(\"product1Id\");",
							"    pm.expect(responseBody.ordered[0].productId).to.equal(product1Id);",
							"    pm.expect(responseBody.ordered[0].quantity).to.equal(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stockservice/public/reserve?product_id={{product1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"public",
						"reserve"
					],
					"query": [
						{
							"key": "product_id",
							"value": "{{product1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "подтвердить успешную оплату",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Confirm payment 1 is succeeded\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"paymentStatus\": \"PROCESSED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/checkoutservice/external/payment/{{payment1Id}}/confirmation",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"checkoutservice",
						"external",
						"payment",
						"{{payment1Id}}",
						"confirmation"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка состояния первого заказа после успешной оплаты",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check order 1 state is 'CHARGED' after payment success\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var orderStatus = responseBody.status;",
							"    pm.expect(orderStatus).to.equal(\"CHARGED\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orderservice/public/order/{{order1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"public",
						"order",
						"{{order1Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка резервирования первого товара после оплаты первого заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check product 1 is still reserved for the order 1 after payment succeeded\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var product1Id = pm.collectionVariables.get(\"product1Id\");",
							"    pm.expect(responseBody.ordered[0].productId).to.equal(product1Id);",
							"    pm.expect(responseBody.ordered[0].quantity).to.equal(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stockservice/public/reserve?product_id={{product1Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"public",
						"reserve"
					],
					"query": [
						{
							"key": "product_id",
							"value": "{{product1Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "добавление в корзину второго продукта",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Product 2 is added to the customer's cart\", function () {",
							"    pm.response.to.have.status(201);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"product2Id\", pm.variables.replaceIn('{{$randomUUID}}'));",
							"pm.collectionVariables.set(\"newCustomerCartLineItemIdempotencyKey\", pm.variables.replaceIn('{{$randomUUID}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Idempotency-Key",
						"value": "{{newCustomerCartLineItemIdempotencyKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"productId\": \"{{product2Id}}\",\n  \"quantity\": 1,\n  \"price\": 10\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/cartservice/public/line-item",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"cartservice",
						"public",
						"line-item"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка временного резервирования второго товара, помещенного в корзину",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check product 2 is reserved temporary for the cart\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var product2Id = pm.collectionVariables.get(\"product2Id\");",
							"    pm.expect(responseBody.inCarts[0].productId).to.equal(product2Id);",
							"    pm.expect(responseBody.inCarts[0].quantity).to.equal(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stockservice/public/reserve?product_id={{product2Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"public",
						"reserve"
					],
					"query": [
						{
							"key": "product_id",
							"value": "{{product2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "начать оформление второго заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Checkout 2 is started\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var paymentId = responseBody.payment.id;",
							"    pm.collectionVariables.set(\"payment2Id\", paymentId);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"checkoutIdempotencyKey\", pm.variables.replaceIn('{{$randomUUID}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Idempotency-Key",
						"value": "{{checkoutIdempotencyKey}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customerId\": \"{{customerId}}\",\n  \"paymentWay\": {\n    \"type\": \"CARD\"\n  },\n  \"deliveryAddress\": {\n    \"asText\": \"my address\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/checkoutservice/public/checkout",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"checkoutservice",
						"public",
						"checkout"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка состояния второго заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check order 2 state is 'CHARGE_PENDING' after the checkout process is started\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var orderId = responseBody[responseBody.length-1].id;",
							"    pm.collectionVariables.set(\"order2Id\", orderId);",
							"    var orderStatus = responseBody[responseBody.length-1].status;",
							"    pm.expect(orderStatus).to.equal(\"CHARGE_PENDING\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orderservice/public/order?customer_id={{customerId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"public",
						"order"
					],
					"query": [
						{
							"key": "customer_id",
							"value": "{{customerId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка резервирования второго товара после начала оформления второго заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check product 2 is reserved for order 2\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var product2Id = pm.collectionVariables.get(\"product2Id\");",
							"    pm.expect(responseBody.ordered[0].productId).to.equal(product2Id);",
							"    pm.expect(responseBody.ordered[0].quantity).to.equal(1);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stockservice/public/reserve?product_id={{product2Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"public",
						"reserve"
					],
					"query": [
						{
							"key": "product_id",
							"value": "{{product2Id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "оплата второго заказа не прошла",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Payment 2 is failed\", function () {",
							"    pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"paymentStatus\": \"FAILED\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/checkoutservice/external/payment/{{payment2Id}}/confirmation",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"checkoutservice",
						"external",
						"payment",
						"{{payment2Id}}",
						"confirmation"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка состояния второго заказа после не прошедшей оплаты",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check order 2 state is 'FAILED' after payment failure\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var orderStatus = responseBody.status;",
							"    pm.expect(orderStatus).to.equal(\"FAILED\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orderservice/public/order/{{order2Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orderservice",
						"public",
						"order",
						"{{order2Id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "проверка резервирования второго товара после не прошедшей оплаты второго заказа",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check product 2 is not reserved for order anymore but reserved for cart after payment failure\", function () {",
							"    pm.response.to.have.status(200);",
							"    var responseBody = pm.response.json();",
							"    var product2Id = pm.collectionVariables.get(\"product2Id\");",
							"    pm.expect(responseBody.inCarts[0].productId).to.equal(product2Id);",
							"    pm.expect(responseBody.inCarts[0].quantity).to.equal(1);",
							"    pm.expect(responseBody.ordered.length).to.equal(0);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"console.log(pm.variables.replaceIn('{{baseUrl}}'));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/stockservice/public/reserve?product_id={{product2Id}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"stockservice",
						"public",
						"reserve"
					],
					"query": [
						{
							"key": "product_id",
							"value": "{{product2Id}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const jar = pm.cookies.jar();",
					"",
					"jar.clear(pm.request.url, function (error) {",
					"  // error - <Error>",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://arch.homework/api",
			"type": "string"
		},
		{
			"key": "customerId",
			"value": "",
			"type": "string"
		},
		{
			"key": "product1Id",
			"value": "",
			"type": "string"
		},
		{
			"key": "product2Id",
			"value": ""
		},
		{
			"key": "order2Id",
			"value": ""
		},
		{
			"key": "order1Id",
			"value": ""
		},
		{
			"key": "orderId",
			"value": ""
		},
		{
			"key": "payment1Id",
			"value": ""
		},
		{
			"key": "payment2Id",
			"value": ""
		},
		{
			"key": "newCustomerCartLineItemIdempotencyKey",
			"value": ""
		},
		{
			"key": "checkoutIdempotencyKey",
			"value": ""
		}
	]
}